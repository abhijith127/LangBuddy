import React, { useState } from 'react';
import './ReadingMaterials.css';

const ReadingMaterials = ({ onBack }) => {
  const [activeCategory, setActiveCategory] = useState('ebooks');
  const [selectedLevel, setSelectedLevel] = useState('all');
  const [selectedReading, setSelectedReading] = useState(null);

  const readingCategories = [
    { id: 'ebooks', name: 'E-books & Stories', icon: 'üìö', color: '#2ecc71' },
    { id: 'news', name: 'News & Articles', icon: 'üì∞', color: '#3498db' },
    { id: 'comics', name: 'Comics & Illustrated', icon: 'üìñ', color: '#f39c12' },
    { id: 'poetry', name: 'Poetry & Literature', icon: 'üìú', color: '#9b59b6' }
  ];

  const readingMaterials = {
    ebooks: [
      {
        id: 1,
        title: 'Hindi Short Stories for Beginners',
        author: 'Rajesh Kumar',
        description: 'Collection of simple Hindi stories with vocabulary help',
        language: 'hindi',
        level: 'beginner',
        pages: 120,
        rating: 4.8,
        thumbnail: 'üìö',
        hasAudio: true,
        hasGlossary: true,
        tags: ['stories', 'vocabulary', 'graded-reader'],
        preview: '‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§ï‡•Ä ‡§¨‡§æ‡§§ ‡§π‡•à, ‡§è‡§ï ‡§õ‡•ã‡§ü‡•á ‡§∏‡•á ‡§ó‡§æ‡§Å‡§µ ‡§Æ‡•á‡§Ç ‡§∞‡§æ‡§Æ ‡§®‡§æ‡§Æ ‡§ï‡§æ ‡§è‡§ï ‡§≤‡§°‡§º‡§ï‡§æ ‡§∞‡§π‡§§‡§æ ‡§•‡§æ...'
      },
      {
        id: 2,
        title: 'Bengali Folk Tales',
        author: 'Anita Sen',
        description: 'Traditional Bengali stories with cultural context',
        language: 'bengali',
        level: 'intermediate',
        pages: 200,
        rating: 4.7,
        thumbnail: 'üìñ',
        hasAudio: false,
        hasGlossary: true,
        tags: ['folklore', 'culture', 'traditional'],
        preview: '‡¶Ö‡¶®‡ßá‡¶ï ‡¶¶‡¶ø‡¶® ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ‡•§ ‡¶è‡¶ï‡¶ü‡¶ø ‡¶õ‡ßã‡¶ü ‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶è‡¶ï‡¶ú‡¶® ‡¶ú‡ßá‡¶≤‡ßá ‡¶•‡¶æ‡¶ï‡¶§...'
      },
      {
        id: 3,
        title: 'Tamil Classic Literature',
        author: 'Dr. Meera Krishnan',
        description: 'Excerpts from famous Tamil literary works',
        language: 'tamil',
        level: 'advanced',
        pages: 300,
        rating: 4.9,
        thumbnail: 'üìú',
        hasAudio: true,
        hasGlossary: true,
        tags: ['literature', 'classic', 'poetry'],
        preview: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ™‡Øä‡Æ©‡Øç‡Æ©‡Ææ‡Æ© ‡Æµ‡Æ∞‡Æø‡Æï‡Æ≥‡Øç...'
      }
    ],
    news: [
      {
        id: 4,
        title: 'Daily Hindi News Digest',
        author: 'News Team',
        description: 'Current events and news in simple Hindi',
        language: 'hindi',
        level: 'intermediate',
        articles: 50,
        rating: 4.6,
        thumbnail: 'üì∞',
        hasAudio: true,
        hasGlossary: false,
        tags: ['news', 'current-events', 'politics'],
        preview: '‡§Ü‡§ú ‡§ï‡•Ä ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§ñ‡§¨‡§∞‡•á‡§Ç: ‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç ‡§®‡§à ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§®‡•Ä‡§§‡§ø...'
      },
      {
        id: 5,
        title: 'Bengali Business News',
        author: 'Business Desk',
        description: 'Business and economic news in Bengali',
        language: 'bengali',
        level: 'advanced',
        articles: 30,
        rating: 4.5,
        thumbnail: 'üíº',
        hasAudio: false,
        hasGlossary: true,
        tags: ['business', 'economics', 'finance'],
        preview: '‡¶¨‡ßç‡¶Ø‡¶¨‡¶∏‡¶æ‡¶Ø‡¶º‡¶ø‡¶ï ‡¶ú‡¶ó‡¶§‡ßá‡¶∞ ‡¶Ü‡¶ú‡¶ï‡ßá‡¶∞ ‡¶ñ‡¶¨‡¶∞...'
      }
    ],
    comics: [
      {
        id: 6,
        title: 'Hindi Comic Adventures',
        author: 'Comic Studio',
        description: 'Fun comic stories for language learning',
        language: 'hindi',
        level: 'beginner',
        issues: 25,
        rating: 4.7,
        thumbnail: 'ü¶∏',
        hasAudio: true,
        hasGlossary: true,
        tags: ['comics', 'adventure', 'visual'],
        preview: '‡§∏‡•Å‡§™‡§∞ ‡§π‡•Ä‡§∞‡•ã ‡§ï‡•Ä ‡§ï‡§π‡§æ‡§®‡•Ä...'
      },
      {
        id: 7,
        title: 'Gujarati Folk Comics',
        author: 'Folk Art Collective',
        description: 'Traditional Gujarati stories in comic format',
        language: 'gujarati',
        level: 'intermediate',
        issues: 15,
        rating: 4.6,
        thumbnail: 'üé≠',
        hasAudio: false,
        hasGlossary: true,
        tags: ['folklore', 'traditional', 'visual'],
        preview: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä ‡™≤‡´ã‡™ï ‡™ï‡™•‡™æ‡™ì...'
      }
    ],
    poetry: [
      {
        id: 8,
        title: 'Modern Hindi Poetry',
        author: 'Various Poets',
        description: 'Contemporary Hindi poetry collection',
        language: 'hindi',
        level: 'advanced',
        poems: 100,
        rating: 4.8,
        thumbnail: 'üåπ',
        hasAudio: true,
        hasGlossary: true,
        tags: ['poetry', 'modern', 'literature'],
        preview: '‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§ï‡§µ‡§ø‡§§‡§æ ‡§ï‡•Ä ‡§¶‡•Å‡§®‡§ø‡§Ø‡§æ...'
      },
      {
        id: 9,
        title: 'Tamil Classical Poetry',
        author: 'Ancient Poets',
        description: 'Classical Tamil poetry with translations',
        language: 'tamil',
        level: 'advanced',
        poems: 75,
        rating: 4.9,
        thumbnail: 'üèõÔ∏è',
        hasAudio: true,
        hasGlossary: true,
        tags: ['classical', 'poetry', 'ancient'],
        preview: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡Æá‡Æ≤‡Æï‡Øç‡Æï‡Æø‡ÆØ‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æö‡ØÜ‡ÆÆ‡Øç‡ÆÆ‡Æ£‡Æø...'
      }
    ]
  };

  const levels = [
    { id: 'all', name: 'All Levels', icon: 'üéØ' },
    { id: 'beginner', name: 'Beginner', icon: 'üå±' },
    { id: 'intermediate', name: 'Intermediate', icon: 'üåø' },
    { id: 'advanced', name: 'Advanced', icon: 'üå≥' }
  ];

  const filteredMaterials = readingMaterials[activeCategory]?.filter(material => 
    selectedLevel === 'all' || material.level === selectedLevel
  ) || [];

  const handleReadingSelect = (reading) => {
    setSelectedReading(reading);
  };

  const handleStartReading = (reading) => {
    // In a real app, this would open the reading interface
    alert(`Starting to read: ${reading.title}`);
  };

  return (
    <div className="reading-materials">
      <div className="reading-header">
        <button className="back-btn" onClick={onBack}>‚Üê Back to Resources</button>
        <h1 className="reading-title">üìñ Reading Materials</h1>
        <div className="reading-stats">
          <span className="total-materials">
            {Object.values(readingMaterials).flat().length} materials
          </span>
        </div>
      </div>

      <div className="reading-controls">
        <div className="category-tabs">
          {readingCategories.map((category, index) => (
            <button
              key={category.id}
              className={`category-tab ${activeCategory === category.id ? 'active' : ''}`}
              onClick={() => setActiveCategory(category.id)}
              style={{ '--color': category.color, '--delay': `${index * 0.1}s` }}
            >
              <span className="tab-icon">{category.icon}</span>
              <span className="tab-name">{category.name}</span>
              <span className="tab-count">{readingMaterials[category.id]?.length || 0}</span>
            </button>
          ))}
        </div>

        <div className="level-filter">
          <label className="filter-label">Level:</label>
          <select
            value={selectedLevel}
            onChange={(e) => setSelectedLevel(e.target.value)}
            className="level-select"
          >
            {levels.map(level => (
              <option key={level.id} value={level.id}>
                {level.icon} {level.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className="materials-grid">
        {filteredMaterials.map((material, index) => (
          <div
            key={material.id}
            className="material-card"
            style={{ '--delay': `${index * 0.1}s` }}
            onClick={() => handleReadingSelect(material)}
          >
            <div className="material-header">
              <div className="material-thumbnail">{material.thumbnail}</div>
              <div className="material-badges">
                {material.hasAudio && <div className="audio-badge">üéß Audio</div>}
                {material.hasGlossary && <div className="glossary-badge">üìù Glossary</div>}
              </div>
            </div>

            <div className="material-content">
              <h3 className="material-title">{material.title}</h3>
              <p className="material-author">by {material.author}</p>
              <p className="material-description">{material.description}</p>

              <div className="material-preview">
                <div className="preview-label">Preview:</div>
                <div className="preview-text">{material.preview}</div>
              </div>

              <div className="material-meta">
                <span className="material-language">{material.language}</span>
                <span className="material-level">{material.level}</span>
                <span className="material-rating">‚≠ê {material.rating}</span>
              </div>

              <div className="material-details">
                <span className="material-count">
                  {material.pages && `${material.pages} pages`}
                  {material.articles && `${material.articles} articles`}
                  {material.issues && `${material.issues} issues`}
                  {material.poems && `${material.poems} poems`}
                </span>
              </div>

              <div className="material-tags">
                {material.tags.map((tag, idx) => (
                  <span key={idx} className="material-tag">{tag}</span>
                ))}
              </div>
            </div>

            <div className="material-actions">
              <button 
                className="read-btn"
                onClick={(e) => {
                  e.stopPropagation();
                  handleStartReading(material);
                }}
              >
                üìñ Read
              </button>
              <button className="bookmark-btn">üîñ</button>
              <button className="download-btn">‚¨áÔ∏è</button>
            </div>
          </div>
        ))}
      </div>

      {filteredMaterials.length === 0 && (
        <div className="no-materials">
          <div className="no-materials-icon">üìö</div>
          <h3 className="no-materials-title">No materials found</h3>
          <p className="no-materials-text">Try selecting a different category or level</p>
        </div>
      )}

      {/* Reading Detail Modal */}
      {selectedReading && (
        <div className="reading-modal" onClick={() => setSelectedReading(null)}>
          <div className="modal-content" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h2 className="modal-title">{selectedReading.title}</h2>
              <button 
                className="modal-close"
                onClick={() => setSelectedReading(null)}
              >
                ‚úï
              </button>
            </div>
            <div className="modal-body">
              <div className="modal-thumbnail">{selectedReading.thumbnail}</div>
              <div className="modal-info">
                <p className="modal-author">by {selectedReading.author}</p>
                <p className="modal-description">{selectedReading.description}</p>
                <div className="modal-preview">
                  <h4>Preview:</h4>
                  <div className="preview-text">{selectedReading.preview}</div>
                </div>
                <div className="modal-meta">
                  <div className="meta-item">
                    <strong>Language:</strong> {selectedReading.language}
                  </div>
                  <div className="meta-item">
                    <strong>Level:</strong> {selectedReading.level}
                  </div>
                  <div className="meta-item">
                    <strong>Rating:</strong> ‚≠ê {selectedReading.rating}
                  </div>
                </div>
                <div className="modal-features">
                  {selectedReading.hasAudio && <span className="feature">üéß Audio Available</span>}
                  {selectedReading.hasGlossary && <span className="feature">üìù Glossary Included</span>}
                </div>
              </div>
            </div>
            <div className="modal-actions">
              <button 
                className="modal-read-btn"
                onClick={() => handleStartReading(selectedReading)}
              >
                üìñ Start Reading
              </button>
              <button className="modal-bookmark-btn">üîñ Bookmark</button>
              <button className="modal-download-btn">‚¨áÔ∏è Download</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReadingMaterials;
